{"version":3,"sources":["Components/Todoitems.js","Components/Todos.js","Components/layouts/header.js","Components/AddTodo.js","Components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","color","border","borderRadius","cursor","float","Todos","todos","map","key","header","headerStyle","linkStyle","to","textAlign","AddTodo","state","e","setState","target","name","value","onSubmit","preventDefault","addTodo","display","flex","placeholder","className","About","App","Axios","delete","then","res","filter","post","data","get","exact","path","render","Fragment","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bbcd588d.chunk.js","sourcesContent":["import React,{Component} from  'react';\r\nimport propTypes from 'prop-types';\r\n\r\n\r\nclass TodoItem extends Component{\r\n    getStyle=()=>{\r\n\r\n        return{\r\n            background:\"#f4f4f4\",\r\n            padding:'10px',\r\n            borderBottom:\"1px #ccc dotted\",\r\n            textDecoration:this.props.todo.completed ?//ternery operator used here\r\n            'line-through':'none'\r\n        }\r\n    \r\n    //    if(this.props.todo.completed){\r\n      ///      return{\r\n                //textDecoration:\"line-through\"\r\n         //   }\r\n       // } else{\r\n         //   return{\r\n               // textDecoration:\"none\"\r\n           // }\r\n        //}\r\n    }\r\n   // markComplete = (e)=>{\r\n     ///   console.log(this.props)\r\n ///   }\r\n\r\n\r\n\r\n\r\n  render(){\r\n    //destructing belowðŸ”½\r\n    const {id,title}=this.props.todo;\r\n\r\n return(\r\n<div style={this.getStyle()}>\r\n\r\n<p>\r\n    <input type=\"checkbox\"  onChange={this.props.markComplete.bind(this,id)}  />{''} \r\n    {title}\r\n    <button onClick={this.props.delTodo.bind(this,id)}style={btnStyle}>x</button>\r\n    {this.props.todo.title}</p>\r\n\r\n        </div>\r\n\r\n\r\n    \r\n      \r\n      )\r\n  }\r\n}\r\n//bind(this)\r\n  //proptypes\r\nTodoItem.propTypes={\r\n    todo:propTypes.object.isRequired\r\n}\r\n\r\n//const itemStyle={\r\n  //  backgroundColor:\"#f4f4f4\"\r\n//}\r\nconst btnStyle={\r\n    background:'#ff0000',\r\n    color:\"#fff\",\r\n    border:\"#fffff\",\r\n    padding:\"5px,9px\", //5px right\r\n    borderRadius:'50%',\r\n    cursor:\"pointer\",\r\n    float:'right'\r\n\r\n}\r\nTodoItem.propTypes={\r\n  todos:propTypes.array.isRequired,\r\n  delTodo:propTypes.func.isRequired,\r\n  markComplete:propTypes.func.isRequired,\r\n  delTodo:propTypes.func.isRequired\r\n}\r\n\r\nexport default TodoItem;\r\n","import React,{Component} from  'react';\r\nimport TodoItem from \"./Todoitems\";\r\nimport propTypes from 'prop-types';\r\n\r\nexport class Todos extends Component{\r\n  \r\n  render(){\r\n return this.props.todos.map((todo)=>(\r\n<TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete}\r\n    delTodo={this.props.delTodo}/>\r\n ));\r\n  }\r\n}\r\n\r\n//proptypes\r\nTodos.propTypes={\r\n    todos:propTypes.array.isRequired,\r\n    delTodo:propTypes.func.isRequired,\r\n    markComplete:propTypes.func.isRequired,\r\n    delTodo:propTypes.func.isRequired\r\n}\r\nexport default Todos;\r\n","import React from 'react';\r\nimport {Link} from \"react-router-dom\"\r\n\r\nexport default function header() {\r\n    return (\r\n        <div>\r\n            <header style={headerStyle}>\r\n                <h1>Brad TodoList</h1>\r\n                <Link style={linkStyle}to=\"/\">Home</Link>|\r\n                <Link style={linkStyle} to=\"/about\">About</Link>\r\n            </header>\r\n        </div>\r\n    )\r\n}\r\nconst headerStyle={\r\n    background:'#333',\r\n    color:'#fff',\r\n    textAlign:'center',\r\n    padding:'10px'\r\n}\r\nconst linkStyle={\r\n    color:\"#fff\",\r\n    textDecoration:\"none\"\r\n}","import React, { Component } from 'react'\r\nimport propTypes from 'prop-types';\r\nexport class AddTodo extends Component {\r\n    state={\r\n        title:''\r\n    }\r\n\r\n    onChange=(e)=>this.setState({ [e.target.name]:e.target.value});\r\n    onSubmit=(e)=>{\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({title:''});\r\n    }\r\n\r\n    render() {\r\n        return(\r\n        <div>\r\n            <form onSubmit={this.onSubmit} style={{display:'flex'}}>\r\n\r\n            <input \r\n            type=\"text\" \r\n            name=\"title\"\r\n            style={{flex:'10', padding:'5px'}}\r\n             placeholder=\"AddTodo\"\r\n             onChange={this.onChange}\r\n            />\r\n             \r\n             <input \r\n             type=\"submit\"\r\n             value=\"submit\"\r\n             className=\"btn\"\r\n             style={{flex:'1'}}\r\n             />\r\n            \r\n\r\n            \r\n\r\n\r\n            </form>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nAddTodo.propTypes={\r\naddTodo:propTypes.func.isRequired,\r\n}\r\nexport default AddTodo","import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <div>\r\n            <h1>About </h1>\r\n            <p>this is the todolist app v1.000 it is part of todoapp</p>\r\n        </div>\r\n    )\r\n}\r\n","import React,{Component} from  'react';\nimport {BrowserRouter as Router,Route} from 'react-router-dom'\nimport Todos from \"./Components/Todos\";\nimport Header from \"./Components/layouts/header\";\nimport AddTodo from \"./Components/AddTodo\";\nimport About from \"./Components/pages/About\";\n\nimport * as uuid from 'uuid';\n\n\nimport './App.css';\nimport Axios from 'axios';\n\n\nclass App extends Component{\n  state={\n    todos:[]\n  }\n  //http request and fetching api\n  componentDidMount(){\n   Axios.get(\"https://jsonplaceholder.typicode.com/todos?_limit=10\")\n    .then(res=>this.setState({todos:res.data}))\n  }\n  //Completed toggele\nmarkComplete=(id)=>{\nthis.setState({todos:this.state.todos.map(todo=>{\n  if(todo.id===id){\n    todo.completed=!todo.completed\n\n  }\n  return todo;\n})});\n}\n//Deltodo\ndelTodo=(id)=>{\n  Axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n  .then(res=>this.setState({todos: [...this.state.todos.filter(todo=>todo.id!==id)]})\n  )}\n\n//adding todo\naddTodo=(title)=>{\n  Axios.post(\"https://jsonplaceholder.typicode.com/todos?_limit=10\",{\n    title,\n    completed:false\n  })\n  .then(res=>this.setState({todos:[...this.state.todos,res.data]}));\n\n\n}\n\n  render(){\n    //console.log(this.state.todos)\n  return(\n    <Router>\n  <div className=\"App\">\n  <div className=\"container\">\n<Header/>\n<Route exact path=\"/\" render={props=>(\n  <React.Fragment>\n<AddTodo addTodo={this.addTodo}/>\n    <Todos todos={this.state.todos} \n    markComplete={this.markComplete}\n      delTodo={this.delTodo}  />\n    \n  </React.Fragment>\n\n)}/>\n<Route path=\"/about\" component={About}/>\n  \n  \n  </div>\n  </div>\n  </Router>\n\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}